
Mini_Project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00001e48  00001edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800082  00800082  00001efe  2**0
                  ALLOC
  3 .stab         00001b48  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011dd  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000087b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009373  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_1>
       8:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 05 	call	0xba8	; 0xba8 <main>
      8a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Reverse_Direction>:
/* Function will be served when rising edge come to INT1 pin
 * >> it will change the direction of motor
 */

void Reverse_Direction(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	if(dir == 0)
     b4e:	80 91 82 00 	lds	r24, 0x0082
     b52:	88 23       	and	r24, r24
     b54:	91 f4       	brne	.+36     	; 0xb7a <Reverse_Direction+0x34>
	{
		SET_BIT(PORTB,PB0);
     b56:	a8 e3       	ldi	r26, 0x38	; 56
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e8 e3       	ldi	r30, 0x38	; 56
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,PB1);
     b64:	a8 e3       	ldi	r26, 0x38	; 56
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e8 e3       	ldi	r30, 0x38	; 56
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8d 7f       	andi	r24, 0xFD	; 253
     b70:	8c 93       	st	X, r24
		dir = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 82 00 	sts	0x0082, r24
     b78:	14 c0       	rjmp	.+40     	; 0xba2 <Reverse_Direction+0x5c>
	}
	else if(dir == 1)
     b7a:	80 91 82 00 	lds	r24, 0x0082
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	81 f4       	brne	.+32     	; 0xba2 <Reverse_Direction+0x5c>
	{
		SET_BIT(PORTB,PB1);
     b82:	a8 e3       	ldi	r26, 0x38	; 56
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e8 e3       	ldi	r30, 0x38	; 56
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,PB0);
     b90:	a8 e3       	ldi	r26, 0x38	; 56
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e8 e3       	ldi	r30, 0x38	; 56
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	8c 93       	st	X, r24
		dir = 0;
     b9e:	10 92 82 00 	sts	0x0082, r1
	}
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <main>:

int main(void)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	2e 97       	sbiw	r28, 0x0e	; 14
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
	/* Set 0,1 bits output for motor */
	SET_BIT(DDRB,PB0);
     bbc:	a7 e3       	ldi	r26, 0x37	; 55
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e7 e3       	ldi	r30, 0x37	; 55
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB1);
     bca:	a7 e3       	ldi	r26, 0x37	; 55
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e7 e3       	ldi	r30, 0x37	; 55
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	8c 93       	st	X, r24

	/* switch motor into clockwise */
	SET_BIT(PORTB,PB1);
     bd8:	a8 e3       	ldi	r26, 0x38	; 56
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e8 e3       	ldi	r30, 0x38	; 56
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,PB0);
     be6:	a8 e3       	ldi	r26, 0x38	; 56
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e8 e3       	ldi	r30, 0x38	; 56
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8e 7f       	andi	r24, 0xFE	; 254
     bf2:	8c 93       	st	X, r24
	 * - choose channel 0
	 * - choose AREF in micro-controller
	 * - choose polling not interrupt because it takes only 3 cycle
	 * - F_CPU / 8 = 1MHZ / 8 = 125KHZ (50 : 200 KHZ)
	 */
	ADC_configType ADC_config = {ADC0,AREF,Polling,F_CPU_8_};
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	1a 82       	std	Y+2, r1	; 0x02
     bf8:	1b 82       	std	Y+3, r1	; 0x03
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	8c 83       	std	Y+4, r24	; 0x04
	/* PWM config ->
	 * - choose PWM in Timer0
	 * - choose clear on compare match mode
	 * - choose F_CPU / 8
	 */
	PWM_configType PWM_config = {TIMER_0,CLEAR_OC0,F_CPU_8};
     bfe:	ce 01       	movw	r24, r28
     c00:	05 96       	adiw	r24, 0x05	; 5
     c02:	9b 87       	std	Y+11, r25	; 0x0b
     c04:	8a 87       	std	Y+10, r24	; 0x0a
     c06:	ee e7       	ldi	r30, 0x7E	; 126
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	fd 87       	std	Y+13, r31	; 0x0d
     c0c:	ec 87       	std	Y+12, r30	; 0x0c
     c0e:	f3 e0       	ldi	r31, 0x03	; 3
     c10:	fe 87       	std	Y+14, r31	; 0x0e
     c12:	ec 85       	ldd	r30, Y+12	; 0x0c
     c14:	fd 85       	ldd	r31, Y+13	; 0x0d
     c16:	00 80       	ld	r0, Z
     c18:	8c 85       	ldd	r24, Y+12	; 0x0c
     c1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	9d 87       	std	Y+13, r25	; 0x0d
     c20:	8c 87       	std	Y+12, r24	; 0x0c
     c22:	ea 85       	ldd	r30, Y+10	; 0x0a
     c24:	fb 85       	ldd	r31, Y+11	; 0x0b
     c26:	00 82       	st	Z, r0
     c28:	8a 85       	ldd	r24, Y+10	; 0x0a
     c2a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	9b 87       	std	Y+11, r25	; 0x0b
     c30:	8a 87       	std	Y+10, r24	; 0x0a
     c32:	9e 85       	ldd	r25, Y+14	; 0x0e
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	9e 87       	std	Y+14, r25	; 0x0e
     c38:	ee 85       	ldd	r30, Y+14	; 0x0e
     c3a:	ee 23       	and	r30, r30
     c3c:	51 f7       	brne	.-44     	; 0xc12 <main+0x6a>

	/* Interrupt config ->
	 * - choose INT1
	 * - interrupt happend when rising edge happend
	 */
	INTERRUPT_configType INTERRUPT_config = {INTERRUPT_1,RISING_EDGE};
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	88 87       	std	Y+8, r24	; 0x08
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	89 87       	std	Y+9, r24	; 0x09

	/* pass config-structure to initial function of every module */
	ADC_init(&ADC_config);
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	0e 94 d2 06 	call	0xda4	; 0xda4 <ADC_init>
	PWM_init(&PWM_config);
     c4e:	ce 01       	movw	r24, r28
     c50:	05 96       	adiw	r24, 0x05	; 5
     c52:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <PWM_init>
	INTERRUPT_init(&INTERRUPT_config);
     c56:	ce 01       	movw	r24, r28
     c58:	08 96       	adiw	r24, 0x08	; 8
     c5a:	0e 94 e7 07 	call	0xfce	; 0xfce <INTERRUPT_init>
	/* give interrupt module the cfunction which will happen when rising edge happen */
	INTERRUPT_1_callBack(Reverse_Direction);
     c5e:	83 ea       	ldi	r24, 0xA3	; 163
     c60:	95 e0       	ldi	r25, 0x05	; 5
     c62:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <INTERRUPT_1_callBack>

	/* initiate lcd */
	LCD_init();
     c66:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_init>
	/* Enable global interrupt >> sei(); */
	SREG |= (1<<7);
     c6a:	af e5       	ldi	r26, 0x5F	; 95
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ef e5       	ldi	r30, 0x5F	; 95
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	8c 93       	st	X, r24

	LCD_displayString("ADC Value = ");
     c78:	80 e6       	ldi	r24, 0x60	; 96
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>

	while(1)
	{
		/* read potentiometer value form cahnnel 0 */
		g_adcResult = ADC_readChannel(&ADC_config);
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 15 07 	call	0xe2a	; 0xe2a <ADC_readChannel>
     c88:	90 93 84 00 	sts	0x0084, r25
     c8c:	80 93 83 00 	sts	0x0083, r24
		/* value of OCR0 = (adcValue * 256) / 1024 = adcValue / 4 */
		g_OCR0 = g_adcResult / 4;
     c90:	80 91 83 00 	lds	r24, 0x0083
     c94:	90 91 84 00 	lds	r25, 0x0084
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	80 93 90 00 	sts	0x0090, r24
		/* change duty cycle according to potentiometer value */
		PWM_changeDuty(&PWM_config,g_OCR0);
     ca4:	20 91 90 00 	lds	r18, 0x0090
     ca8:	ce 01       	movw	r24, r28
     caa:	05 96       	adiw	r24, 0x05	; 5
     cac:	62 2f       	mov	r22, r18
     cae:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <PWM_changeDuty>
		/* display adcVaue on chosen place */
		LCD_goToRowColumn(0,12);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	6c e0       	ldi	r22, 0x0C	; 12
     cb6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_goToRowColumn>
		/* these condition solve show 4 digits on lcd problem */

		if(g_adcResult > 1000)
     cba:	80 91 83 00 	lds	r24, 0x0083
     cbe:	90 91 84 00 	lds	r25, 0x0084
     cc2:	f3 e0       	ldi	r31, 0x03	; 3
     cc4:	89 3e       	cpi	r24, 0xE9	; 233
     cc6:	9f 07       	cpc	r25, r31
     cc8:	38 f0       	brcs	.+14     	; 0xcd8 <main+0x130>
		{
			LCD_intgerToString(g_adcResult);
     cca:	80 91 83 00 	lds	r24, 0x0083
     cce:	90 91 84 00 	lds	r25, 0x0084
     cd2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_intgerToString>
     cd6:	d4 cf       	rjmp	.-88     	; 0xc80 <main+0xd8>
		}
		else if(g_adcResult > 100 && g_adcResult < 1000)
     cd8:	80 91 83 00 	lds	r24, 0x0083
     cdc:	90 91 84 00 	lds	r25, 0x0084
     ce0:	85 36       	cpi	r24, 0x65	; 101
     ce2:	91 05       	cpc	r25, r1
     ce4:	98 f0       	brcs	.+38     	; 0xd0c <main+0x164>
     ce6:	80 91 83 00 	lds	r24, 0x0083
     cea:	90 91 84 00 	lds	r25, 0x0084
     cee:	23 e0       	ldi	r18, 0x03	; 3
     cf0:	88 3e       	cpi	r24, 0xE8	; 232
     cf2:	92 07       	cpc	r25, r18
     cf4:	58 f4       	brcc	.+22     	; 0xd0c <main+0x164>
		{
			LCD_displayString(" ");
     cf6:	8d e6       	ldi	r24, 0x6D	; 109
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
			LCD_intgerToString(g_adcResult);
     cfe:	80 91 83 00 	lds	r24, 0x0083
     d02:	90 91 84 00 	lds	r25, 0x0084
     d06:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_intgerToString>
     d0a:	ba cf       	rjmp	.-140    	; 0xc80 <main+0xd8>
		}
		else if(g_adcResult > 10 && g_adcResult < 100)
     d0c:	80 91 83 00 	lds	r24, 0x0083
     d10:	90 91 84 00 	lds	r25, 0x0084
     d14:	8b 30       	cpi	r24, 0x0B	; 11
     d16:	91 05       	cpc	r25, r1
     d18:	90 f0       	brcs	.+36     	; 0xd3e <main+0x196>
     d1a:	80 91 83 00 	lds	r24, 0x0083
     d1e:	90 91 84 00 	lds	r25, 0x0084
     d22:	84 36       	cpi	r24, 0x64	; 100
     d24:	91 05       	cpc	r25, r1
     d26:	58 f4       	brcc	.+22     	; 0xd3e <main+0x196>
		{
			LCD_displayString("  ");
     d28:	8f e6       	ldi	r24, 0x6F	; 111
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
			LCD_intgerToString(g_adcResult);
     d30:	80 91 83 00 	lds	r24, 0x0083
     d34:	90 91 84 00 	lds	r25, 0x0084
     d38:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_intgerToString>
     d3c:	a1 cf       	rjmp	.-190    	; 0xc80 <main+0xd8>
		}
		else if(g_adcResult < 10)
     d3e:	80 91 83 00 	lds	r24, 0x0083
     d42:	90 91 84 00 	lds	r25, 0x0084
     d46:	8a 30       	cpi	r24, 0x0A	; 10
     d48:	91 05       	cpc	r25, r1
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <main+0x1a6>
     d4c:	99 cf       	rjmp	.-206    	; 0xc80 <main+0xd8>
		{
			LCD_displayString("   ");
     d4e:	82 e7       	ldi	r24, 0x72	; 114
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
			LCD_intgerToString(g_adcResult);
     d56:	80 91 83 00 	lds	r24, 0x0083
     d5a:	90 91 84 00 	lds	r25, 0x0084
     d5e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_intgerToString>
     d62:	8e cf       	rjmp	.-228    	; 0xc80 <main+0xd8>

00000d64 <__vector_14>:
#include "adc.h"

volatile uint16 g_adcResult = 0;

ISR(ADC_vect)
{
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	g_adcResult = ADC;
     d7e:	e4 e2       	ldi	r30, 0x24	; 36
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	90 93 84 00 	sts	0x0084, r25
     d8a:	80 93 83 00 	sts	0x0083, r24
}
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <ADC_init>:

void ADC_init(const ADC_configType * config_Ptr)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <ADC_init+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = ((config_Ptr->reference)<<5);
     db2:	a7 e2       	ldi	r26, 0x27	; 39
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	81 81       	ldd	r24, Z+1	; 0x01
     dbc:	82 95       	swap	r24
     dbe:	88 0f       	add	r24, r24
     dc0:	80 7e       	andi	r24, 0xE0	; 224
     dc2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);
     dc4:	a6 e2       	ldi	r26, 0x26	; 38
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e6 e2       	ldi	r30, 0x26	; 38
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 68       	ori	r24, 0x80	; 128
     dd0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);
     dd2:	a6 e2       	ldi	r26, 0x26	; 38
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 68       	ori	r24, 0x80	; 128
     dde:	8c 93       	st	X, r24
	ADCSRA |= ((config_Ptr->mode)<<ADIE);
     de0:	a6 e2       	ldi	r26, 0x26	; 38
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e6 e2       	ldi	r30, 0x26	; 38
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	28 2f       	mov	r18, r24
     dec:	e9 81       	ldd	r30, Y+1	; 0x01
     dee:	fa 81       	ldd	r31, Y+2	; 0x02
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	82 2b       	or	r24, r18
     e04:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0xF8) | ((config_Ptr->Division) & 0x07);
     e06:	a6 e2       	ldi	r26, 0x26	; 38
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e6 e2       	ldi	r30, 0x26	; 38
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	98 2f       	mov	r25, r24
     e12:	98 7f       	andi	r25, 0xF8	; 248
     e14:	e9 81       	ldd	r30, Y+1	; 0x01
     e16:	fa 81       	ldd	r31, Y+2	; 0x02
     e18:	83 81       	ldd	r24, Z+3	; 0x03
     e1a:	87 70       	andi	r24, 0x07	; 7
     e1c:	89 2b       	or	r24, r25
     e1e:	8c 93       	st	X, r24
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <ADC_readChannel>:

uint16 ADC_readChannel(const ADC_configType * config_Ptr)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <ADC_readChannel+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | ((config_Ptr->channel) & 0x07);
     e38:	a7 e2       	ldi	r26, 0x27	; 39
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e2       	ldi	r30, 0x27	; 39
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	98 2f       	mov	r25, r24
     e44:	90 7e       	andi	r25, 0xE0	; 224
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	80 81       	ld	r24, Z
     e4c:	87 70       	andi	r24, 0x07	; 7
     e4e:	89 2b       	or	r24, r25
     e50:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     e52:	a6 e2       	ldi	r26, 0x26	; 38
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e6 e2       	ldi	r30, 0x26	; 38
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24
	if((config_Ptr->mode) == Polling)
     e60:	e9 81       	ldd	r30, Y+1	; 0x01
     e62:	fa 81       	ldd	r31, Y+2	; 0x02
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	88 23       	and	r24, r24
     e68:	81 f4       	brne	.+32     	; 0xe8a <ADC_readChannel+0x60>
	{
		while(BIT_IS_CLEAR(ADCSRA,ADIF));
     e6a:	e6 e2       	ldi	r30, 0x26	; 38
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	80 71       	andi	r24, 0x10	; 16
     e76:	90 70       	andi	r25, 0x00	; 0
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	b9 f3       	breq	.-18     	; 0xe6a <ADC_readChannel+0x40>
		SET_BIT(ADCSRA,ADIF);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	8c 93       	st	X, r24
	}
	return ADC;
     e8a:	e4 e2       	ldi	r30, 0x24	; 36
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <__vector_1>:
static volatile void (*g_callBackPtr0)(void) = NULL_PTR;
static volatile void (*g_callBackPtr1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

ISR(INT0_vect)
{
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
     ec6:	80 91 85 00 	lds	r24, 0x0085
     eca:	90 91 86 00 	lds	r25, 0x0086
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	29 f0       	breq	.+10     	; 0xedc <__vector_1+0x40>
	{
		(*g_callBackPtr0)();
     ed2:	e0 91 85 00 	lds	r30, 0x0085
     ed6:	f0 91 86 00 	lds	r31, 0x0086
     eda:	09 95       	icall
	}
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_2>:

ISR(INT1_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     f2c:	80 91 87 00 	lds	r24, 0x0087
     f30:	90 91 88 00 	lds	r25, 0x0088
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	29 f0       	breq	.+10     	; 0xf42 <__vector_2+0x40>
	{
		(*g_callBackPtr1)();
     f38:	e0 91 87 00 	lds	r30, 0x0087
     f3c:	f0 91 88 00 	lds	r31, 0x0088
     f40:	09 95       	icall
	}
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_18>:

ISR(INT2_vect)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	5f 93       	push	r21
     f7a:	6f 93       	push	r22
     f7c:	7f 93       	push	r23
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     f92:	80 91 89 00 	lds	r24, 0x0089
     f96:	90 91 8a 00 	lds	r25, 0x008A
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	29 f0       	breq	.+10     	; 0xfa8 <__vector_18+0x40>
	{
		(*g_callBackPtr2)();
     f9e:	e0 91 89 00 	lds	r30, 0x0089
     fa2:	f0 91 8a 00 	lds	r31, 0x008A
     fa6:	09 95       	icall
	}
}
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <INTERRUPT_init>:

void INTERRUPT_init(const INTERRUPT_configType * config_Ptr)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <INTERRUPT_init+0x6>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
	if((config_Ptr->INTERRUPT_number) == INTERRUPT_0)
     fdc:	e9 81       	ldd	r30, Y+1	; 0x01
     fde:	fa 81       	ldd	r31, Y+2	; 0x02
     fe0:	80 81       	ld	r24, Z
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <INTERRUPT_init+0x1a>
     fe6:	5f c0       	rjmp	.+190    	; 0x10a6 <INTERRUPT_init+0xd8>
	{
		CLEAR_BIT(DDRD,PD2);
     fe8:	a1 e3       	ldi	r26, 0x31	; 49
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e1 e3       	ldi	r30, 0x31	; 49
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8b 7f       	andi	r24, 0xFB	; 251
     ff4:	8c 93       	st	X, r24
		SET_BIT(GICR,INT0);
     ff6:	ab e5       	ldi	r26, 0x5B	; 91
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e5       	ldi	r30, 0x5B	; 91
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	8c 93       	st	X, r24
		if((config_Ptr->mode) == LOW_LEVEL)
    1004:	e9 81       	ldd	r30, Y+1	; 0x01
    1006:	fa 81       	ldd	r31, Y+2	; 0x02
    1008:	81 81       	ldd	r24, Z+1	; 0x01
    100a:	88 23       	and	r24, r24
    100c:	79 f4       	brne	.+30     	; 0x102c <INTERRUPT_init+0x5e>
		{
			CLEAR_BIT(MCUCR,ISC00);
    100e:	a5 e5       	ldi	r26, 0x55	; 85
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e5       	ldi	r30, 0x55	; 85
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8e 7f       	andi	r24, 0xFE	; 254
    101a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    101c:	a5 e5       	ldi	r26, 0x55	; 85
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e5 e5       	ldi	r30, 0x55	; 85
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8d 7f       	andi	r24, 0xFD	; 253
    1028:	8c 93       	st	X, r24
    102a:	cd c0       	rjmp	.+410    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == ANY_CHANGE)
    102c:	e9 81       	ldd	r30, Y+1	; 0x01
    102e:	fa 81       	ldd	r31, Y+2	; 0x02
    1030:	81 81       	ldd	r24, Z+1	; 0x01
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	79 f4       	brne	.+30     	; 0x1054 <INTERRUPT_init+0x86>
		{
			SET_BIT(MCUCR,ISC00);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	81 60       	ori	r24, 0x01	; 1
    1042:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	8c 93       	st	X, r24
    1052:	b9 c0       	rjmp	.+370    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == FALLING_EDGE)
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	81 81       	ldd	r24, Z+1	; 0x01
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	79 f4       	brne	.+30     	; 0x107c <INTERRUPT_init+0xae>
		{
			CLEAR_BIT(MCUCR,ISC00);
    105e:	a5 e5       	ldi	r26, 0x55	; 85
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e5       	ldi	r30, 0x55	; 85
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    106c:	a5 e5       	ldi	r26, 0x55	; 85
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e5       	ldi	r30, 0x55	; 85
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	8c 93       	st	X, r24
    107a:	a5 c0       	rjmp	.+330    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == RISING_EDGE)
    107c:	e9 81       	ldd	r30, Y+1	; 0x01
    107e:	fa 81       	ldd	r31, Y+2	; 0x02
    1080:	81 81       	ldd	r24, Z+1	; 0x01
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	09 f0       	breq	.+2      	; 0x1088 <INTERRUPT_init+0xba>
    1086:	9f c0       	rjmp	.+318    	; 0x11c6 <INTERRUPT_init+0x1f8>
		{
			SET_BIT(MCUCR,ISC00);
    1088:	a5 e5       	ldi	r26, 0x55	; 85
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e5       	ldi	r30, 0x55	; 85
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1096:	a5 e5       	ldi	r26, 0x55	; 85
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e5       	ldi	r30, 0x55	; 85
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	8c 93       	st	X, r24
    10a4:	90 c0       	rjmp	.+288    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
	}
	else if((config_Ptr->INTERRUPT_number) == INTERRUPT_1)
    10a6:	e9 81       	ldd	r30, Y+1	; 0x01
    10a8:	fa 81       	ldd	r31, Y+2	; 0x02
    10aa:	80 81       	ld	r24, Z
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <INTERRUPT_init+0xe4>
    10b0:	5e c0       	rjmp	.+188    	; 0x116e <INTERRUPT_init+0x1a0>
	{
		CLEAR_BIT(DDRD,PD3);
    10b2:	a1 e3       	ldi	r26, 0x31	; 49
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	87 7f       	andi	r24, 0xF7	; 247
    10be:	8c 93       	st	X, r24
		SET_BIT(GICR,INT1);
    10c0:	ab e5       	ldi	r26, 0x5B	; 91
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	eb e5       	ldi	r30, 0x5B	; 91
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 68       	ori	r24, 0x80	; 128
    10cc:	8c 93       	st	X, r24
		if((config_Ptr->mode) == LOW_LEVEL)
    10ce:	e9 81       	ldd	r30, Y+1	; 0x01
    10d0:	fa 81       	ldd	r31, Y+2	; 0x02
    10d2:	81 81       	ldd	r24, Z+1	; 0x01
    10d4:	88 23       	and	r24, r24
    10d6:	79 f4       	brne	.+30     	; 0x10f6 <INTERRUPT_init+0x128>
		{
			CLEAR_BIT(MCUCR,ISC10);
    10d8:	a5 e5       	ldi	r26, 0x55	; 85
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e5       	ldi	r30, 0x55	; 85
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    10e6:	a5 e5       	ldi	r26, 0x55	; 85
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e5       	ldi	r30, 0x55	; 85
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	8c 93       	st	X, r24
    10f4:	68 c0       	rjmp	.+208    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == ANY_CHANGE)
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	81 81       	ldd	r24, Z+1	; 0x01
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	79 f4       	brne	.+30     	; 0x111e <INTERRUPT_init+0x150>
		{
			SET_BIT(MCUCR,ISC10);
    1100:	a5 e5       	ldi	r26, 0x55	; 85
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e5       	ldi	r30, 0x55	; 85
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	84 60       	ori	r24, 0x04	; 4
    110c:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    110e:	a5 e5       	ldi	r26, 0x55	; 85
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e5       	ldi	r30, 0x55	; 85
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	87 7f       	andi	r24, 0xF7	; 247
    111a:	8c 93       	st	X, r24
    111c:	54 c0       	rjmp	.+168    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == FALLING_EDGE)
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	81 81       	ldd	r24, Z+1	; 0x01
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	79 f4       	brne	.+30     	; 0x1146 <INTERRUPT_init+0x178>
		{
			CLEAR_BIT(MCUCR,ISC10);
    1128:	a5 e5       	ldi	r26, 0x55	; 85
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e5       	ldi	r30, 0x55	; 85
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8b 7f       	andi	r24, 0xFB	; 251
    1134:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    1136:	a5 e5       	ldi	r26, 0x55	; 85
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e5       	ldi	r30, 0x55	; 85
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	88 60       	ori	r24, 0x08	; 8
    1142:	8c 93       	st	X, r24
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == RISING_EDGE)
    1146:	e9 81       	ldd	r30, Y+1	; 0x01
    1148:	fa 81       	ldd	r31, Y+2	; 0x02
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	d9 f5       	brne	.+118    	; 0x11c6 <INTERRUPT_init+0x1f8>
		{
			SET_BIT(MCUCR,ISC10);
    1150:	a5 e5       	ldi	r26, 0x55	; 85
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e5       	ldi	r30, 0x55	; 85
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	84 60       	ori	r24, 0x04	; 4
    115c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    115e:	a5 e5       	ldi	r26, 0x55	; 85
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e5       	ldi	r30, 0x55	; 85
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 60       	ori	r24, 0x08	; 8
    116a:	8c 93       	st	X, r24
    116c:	2c c0       	rjmp	.+88     	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
	}
	else if ((config_Ptr->INTERRUPT_number) == INTERRUPT_2)
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	80 81       	ld	r24, Z
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	39 f5       	brne	.+78     	; 0x11c6 <INTERRUPT_init+0x1f8>
	{
		CLEAR_BIT(DDRB,PD2);
    1178:	a7 e3       	ldi	r26, 0x37	; 55
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e7 e3       	ldi	r30, 0x37	; 55
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	8c 93       	st	X, r24
		SET_BIT(GICR,INT2);
    1186:	ab e5       	ldi	r26, 0x5B	; 91
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e5       	ldi	r30, 0x5B	; 91
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 62       	ori	r24, 0x20	; 32
    1192:	8c 93       	st	X, r24
		if((config_Ptr->mode) == FALLING_EDGE)
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	81 81       	ldd	r24, Z+1	; 0x01
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	41 f4       	brne	.+16     	; 0x11ae <INTERRUPT_init+0x1e0>
		{
			CLEAR_BIT(MCUCSR,ISC2);
    119e:	a4 e5       	ldi	r26, 0x54	; 84
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e4 e5       	ldi	r30, 0x54	; 84
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 7b       	andi	r24, 0xBF	; 191
    11aa:	8c 93       	st	X, r24
    11ac:	0c c0       	rjmp	.+24     	; 0x11c6 <INTERRUPT_init+0x1f8>
		}
		else if((config_Ptr->mode) == RISING_EDGE)
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	81 81       	ldd	r24, Z+1	; 0x01
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <INTERRUPT_init+0x1f8>
		{
			SET_BIT(MCUCSR,ISC2);
    11b8:	a4 e5       	ldi	r26, 0x54	; 84
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e4 e5       	ldi	r30, 0x54	; 84
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	80 64       	ori	r24, 0x40	; 64
    11c4:	8c 93       	st	X, r24
		}

	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <INTERRUPT_0_callBack>:

void INTERRUPT_0_callBack(void (*a_ptr)(void))
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <INTERRUPT_0_callBack+0x6>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr0 = a_ptr;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	90 93 86 00 	sts	0x0086, r25
    11e6:	80 93 85 00 	sts	0x0085, r24
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <INTERRUPT_1_callBack>:

void INTERRUPT_1_callBack(void (*a_ptr)(void))
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <INTERRUPT_1_callBack+0x6>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	90 93 88 00 	sts	0x0088, r25
    120a:	80 93 87 00 	sts	0x0087, r24
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <INTERRUPT_2_callBack>:

void INTERRUPT_2_callBack(void (*a_ptr)(void))
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <INTERRUPT_2_callBack+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	90 93 8a 00 	sts	0x008A, r25
    122e:	80 93 89 00 	sts	0x0089, r24
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1244:	a1 e3       	ldi	r26, 0x31	; 49
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 67       	ori	r24, 0x70	; 112
    1250:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1252:	e4 e3       	ldi	r30, 0x34	; 52
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    125a:	88 e3       	ldi	r24, 0x38	; 56
    125c:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1260:	8c e0       	ldi	r24, 0x0C	; 12
    1262:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	e9 97       	sbiw	r28, 0x39	; 57
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1288:	a2 e3       	ldi	r26, 0x32	; 50
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7e       	andi	r24, 0xEF	; 239
    1294:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1296:	a2 e3       	ldi	r26, 0x32	; 50
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e2 e3       	ldi	r30, 0x32	; 50
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 7d       	andi	r24, 0xDF	; 223
    12a2:	8c 93       	st	X, r24
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e8       	ldi	r26, 0x80	; 128
    12aa:	bf e3       	ldi	r27, 0x3F	; 63
    12ac:	8d ab       	std	Y+53, r24	; 0x35
    12ae:	9e ab       	std	Y+54, r25	; 0x36
    12b0:	af ab       	std	Y+55, r26	; 0x37
    12b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	6d a9       	ldd	r22, Y+53	; 0x35
    12b6:	7e a9       	ldd	r23, Y+54	; 0x36
    12b8:	8f a9       	ldd	r24, Y+55	; 0x37
    12ba:	98 ad       	ldd	r25, Y+56	; 0x38
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a e7       	ldi	r20, 0x7A	; 122
    12c2:	53 e4       	ldi	r21, 0x43	; 67
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	89 ab       	std	Y+49, r24	; 0x31
    12ce:	9a ab       	std	Y+50, r25	; 0x32
    12d0:	ab ab       	std	Y+51, r26	; 0x33
    12d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12d4:	69 a9       	ldd	r22, Y+49	; 0x31
    12d6:	7a a9       	ldd	r23, Y+50	; 0x32
    12d8:	8b a9       	ldd	r24, Y+51	; 0x33
    12da:	9c a9       	ldd	r25, Y+52	; 0x34
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <LCD_sendCommand+0x84>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	98 ab       	std	Y+48, r25	; 0x30
    12f2:	8f a7       	std	Y+47, r24	; 0x2f
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    12f6:	69 a9       	ldd	r22, Y+49	; 0x31
    12f8:	7a a9       	ldd	r23, Y+50	; 0x32
    12fa:	8b a9       	ldd	r24, Y+51	; 0x33
    12fc:	9c a9       	ldd	r25, Y+52	; 0x34
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	6d a9       	ldd	r22, Y+53	; 0x35
    1310:	7e a9       	ldd	r23, Y+54	; 0x36
    1312:	8f a9       	ldd	r24, Y+55	; 0x37
    1314:	98 ad       	ldd	r25, Y+56	; 0x38
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	98 ab       	std	Y+48, r25	; 0x30
    1334:	8f a7       	std	Y+47, r24	; 0x2f
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <LCD_sendCommand+0xe4>
    1338:	89 e1       	ldi	r24, 0x19	; 25
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9e a7       	std	Y+46, r25	; 0x2e
    133e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1340:	8d a5       	ldd	r24, Y+45	; 0x2d
    1342:	9e a5       	ldd	r25, Y+46	; 0x2e
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_sendCommand+0xd2>
    1348:	9e a7       	std	Y+46, r25	; 0x2e
    134a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	8f a5       	ldd	r24, Y+47	; 0x2f
    134e:	98 a9       	ldd	r25, Y+48	; 0x30
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	8f a5       	ldd	r24, Y+47	; 0x2f
    1358:	98 a9       	ldd	r25, Y+48	; 0x30
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <LCD_sendCommand+0xc6>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	98 ab       	std	Y+48, r25	; 0x30
    1372:	8f a7       	std	Y+47, r24	; 0x2f
    1374:	8f a5       	ldd	r24, Y+47	; 0x2f
    1376:	98 a9       	ldd	r25, Y+48	; 0x30
    1378:	9c a7       	std	Y+44, r25	; 0x2c
    137a:	8b a7       	std	Y+43, r24	; 0x2b
    137c:	8b a5       	ldd	r24, Y+43	; 0x2b
    137e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <LCD_sendCommand+0x10e>
    1384:	9c a7       	std	Y+44, r25	; 0x2c
    1386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1388:	a2 e3       	ldi	r26, 0x32	; 50
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e2 e3       	ldi	r30, 0x32	; 50
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	8c 93       	st	X, r24
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e8       	ldi	r26, 0x80	; 128
    139c:	bf e3       	ldi	r27, 0x3F	; 63
    139e:	8f a3       	std	Y+39, r24	; 0x27
    13a0:	98 a7       	std	Y+40, r25	; 0x28
    13a2:	a9 a7       	std	Y+41, r26	; 0x29
    13a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	6f a1       	ldd	r22, Y+39	; 0x27
    13a8:	78 a5       	ldd	r23, Y+40	; 0x28
    13aa:	89 a5       	ldd	r24, Y+41	; 0x29
    13ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a e7       	ldi	r20, 0x7A	; 122
    13b4:	53 e4       	ldi	r21, 0x43	; 67
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	8b a3       	std	Y+35, r24	; 0x23
    13c0:	9c a3       	std	Y+36, r25	; 0x24
    13c2:	ad a3       	std	Y+37, r26	; 0x25
    13c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13c6:	6b a1       	ldd	r22, Y+35	; 0x23
    13c8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ca:	8d a1       	ldd	r24, Y+37	; 0x25
    13cc:	9e a1       	ldd	r25, Y+38	; 0x26
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <LCD_sendCommand+0x176>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a a3       	std	Y+34, r25	; 0x22
    13e4:	89 a3       	std	Y+33, r24	; 0x21
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    13e8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ea:	7c a1       	ldd	r23, Y+36	; 0x24
    13ec:	8d a1       	ldd	r24, Y+37	; 0x25
    13ee:	9e a1       	ldd	r25, Y+38	; 0x26
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	4c f5       	brge	.+82     	; 0x1452 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	6f a1       	ldd	r22, Y+39	; 0x27
    1402:	78 a5       	ldd	r23, Y+40	; 0x28
    1404:	89 a5       	ldd	r24, Y+41	; 0x29
    1406:	9a a5       	ldd	r25, Y+42	; 0x2a
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <LCD_sendCommand+0x1d6>
    142a:	89 e1       	ldi	r24, 0x19	; 25
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	98 a3       	std	Y+32, r25	; 0x20
    1430:	8f 8f       	std	Y+31, r24	; 0x1f
    1432:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1434:	98 a1       	ldd	r25, Y+32	; 0x20
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_sendCommand+0x1c4>
    143a:	98 a3       	std	Y+32, r25	; 0x20
    143c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	89 a1       	ldd	r24, Y+33	; 0x21
    1440:	9a a1       	ldd	r25, Y+34	; 0x22
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	9a a3       	std	Y+34, r25	; 0x22
    1446:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	89 a1       	ldd	r24, Y+33	; 0x21
    144a:	9a a1       	ldd	r25, Y+34	; 0x22
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	69 f7       	brne	.-38     	; 0x142a <LCD_sendCommand+0x1b8>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1452:	6b a1       	ldd	r22, Y+35	; 0x23
    1454:	7c a1       	ldd	r23, Y+36	; 0x24
    1456:	8d a1       	ldd	r24, Y+37	; 0x25
    1458:	9e a1       	ldd	r25, Y+38	; 0x26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9a a3       	std	Y+34, r25	; 0x22
    1464:	89 a3       	std	Y+33, r24	; 0x21
    1466:	89 a1       	ldd	r24, Y+33	; 0x21
    1468:	9a a1       	ldd	r25, Y+34	; 0x22
    146a:	9e 8f       	std	Y+30, r25	; 0x1e
    146c:	8d 8f       	std	Y+29, r24	; 0x1d
    146e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1470:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_sendCommand+0x200>
    1476:	9e 8f       	std	Y+30, r25	; 0x1e
    1478:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
	#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	89 ad       	ldd	r24, Y+57	; 0x39
    1480:	80 83       	st	Z, r24
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e8       	ldi	r26, 0x80	; 128
    1488:	bf e3       	ldi	r27, 0x3F	; 63
    148a:	89 8f       	std	Y+25, r24	; 0x19
    148c:	9a 8f       	std	Y+26, r25	; 0x1a
    148e:	ab 8f       	std	Y+27, r26	; 0x1b
    1490:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	69 8d       	ldd	r22, Y+25	; 0x19
    1494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a e7       	ldi	r20, 0x7A	; 122
    14a0:	53 e4       	ldi	r21, 0x43	; 67
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8d 8b       	std	Y+21, r24	; 0x15
    14ac:	9e 8b       	std	Y+22, r25	; 0x16
    14ae:	af 8b       	std	Y+23, r26	; 0x17
    14b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <LCD_sendCommand+0x262>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9c 8b       	std	Y+20, r25	; 0x14
    14d0:	8b 8b       	std	Y+19, r24	; 0x13
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	69 8d       	ldd	r22, Y+25	; 0x19
    14ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <LCD_sendCommand+0x2c2>
    1516:	89 e1       	ldi	r24, 0x19	; 25
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9a 8b       	std	Y+18, r25	; 0x12
    151c:	89 8b       	std	Y+17, r24	; 0x11
    151e:	89 89       	ldd	r24, Y+17	; 0x11
    1520:	9a 89       	ldd	r25, Y+18	; 0x12
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_sendCommand+0x2b0>
    1526:	9a 8b       	std	Y+18, r25	; 0x12
    1528:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8b 89       	ldd	r24, Y+19	; 0x13
    1536:	9c 89       	ldd	r25, Y+20	; 0x14
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <LCD_sendCommand+0x2a4>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	6d 89       	ldd	r22, Y+21	; 0x15
    1540:	7e 89       	ldd	r23, Y+22	; 0x16
    1542:	8f 89       	ldd	r24, Y+23	; 0x17
    1544:	98 8d       	ldd	r25, Y+24	; 0x18
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9c 8b       	std	Y+20, r25	; 0x14
    1550:	8b 8b       	std	Y+19, r24	; 0x13
    1552:	8b 89       	ldd	r24, Y+19	; 0x13
    1554:	9c 89       	ldd	r25, Y+20	; 0x14
    1556:	98 8b       	std	Y+16, r25	; 0x10
    1558:	8f 87       	std	Y+15, r24	; 0x0f
    155a:	8f 85       	ldd	r24, Y+15	; 0x0f
    155c:	98 89       	ldd	r25, Y+16	; 0x10
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_sendCommand+0x2ec>
    1562:	98 8b       	std	Y+16, r25	; 0x10
    1564:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1566:	a2 e3       	ldi	r26, 0x32	; 50
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e2 e3       	ldi	r30, 0x32	; 50
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8f 7b       	andi	r24, 0xBF	; 191
    1572:	8c 93       	st	X, r24
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e8       	ldi	r26, 0x80	; 128
    157a:	bf e3       	ldi	r27, 0x3F	; 63
    157c:	8b 87       	std	Y+11, r24	; 0x0b
    157e:	9c 87       	std	Y+12, r25	; 0x0c
    1580:	ad 87       	std	Y+13, r26	; 0x0d
    1582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	7c 85       	ldd	r23, Y+12	; 0x0c
    1588:	8d 85       	ldd	r24, Y+13	; 0x0d
    158a:	9e 85       	ldd	r25, Y+14	; 0x0e
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a e7       	ldi	r20, 0x7A	; 122
    1592:	53 e4       	ldi	r21, 0x43	; 67
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	8f 83       	std	Y+7, r24	; 0x07
    159e:	98 87       	std	Y+8, r25	; 0x08
    15a0:	a9 87       	std	Y+9, r26	; 0x09
    15a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <LCD_sendCommand+0x354>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <LCD_sendCommand+0x3b4>
    1608:	89 e1       	ldi	r24, 0x19	; 25
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <LCD_sendCommand+0x3a2>
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <LCD_sendCommand+0x396>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_sendCommand+0x3de>
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    1658:	e9 96       	adiw	r28, 0x39	; 57
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	e9 97       	sbiw	r28, 0x39	; 57
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1680:	a2 e3       	ldi	r26, 0x32	; 50
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 61       	ori	r24, 0x10	; 16
    168c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 7d       	andi	r24, 0xDF	; 223
    169a:	8c 93       	st	X, r24
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e8       	ldi	r26, 0x80	; 128
    16a2:	bf e3       	ldi	r27, 0x3F	; 63
    16a4:	8d ab       	std	Y+53, r24	; 0x35
    16a6:	9e ab       	std	Y+54, r25	; 0x36
    16a8:	af ab       	std	Y+55, r26	; 0x37
    16aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	6d a9       	ldd	r22, Y+53	; 0x35
    16ae:	7e a9       	ldd	r23, Y+54	; 0x36
    16b0:	8f a9       	ldd	r24, Y+55	; 0x37
    16b2:	98 ad       	ldd	r25, Y+56	; 0x38
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	89 ab       	std	Y+49, r24	; 0x31
    16c6:	9a ab       	std	Y+50, r25	; 0x32
    16c8:	ab ab       	std	Y+51, r26	; 0x33
    16ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16cc:	69 a9       	ldd	r22, Y+49	; 0x31
    16ce:	7a a9       	ldd	r23, Y+50	; 0x32
    16d0:	8b a9       	ldd	r24, Y+51	; 0x33
    16d2:	9c a9       	ldd	r25, Y+52	; 0x34
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <LCD_displayCharacter+0x84>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	98 ab       	std	Y+48, r25	; 0x30
    16ea:	8f a7       	std	Y+47, r24	; 0x2f
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    16ee:	69 a9       	ldd	r22, Y+49	; 0x31
    16f0:	7a a9       	ldd	r23, Y+50	; 0x32
    16f2:	8b a9       	ldd	r24, Y+51	; 0x33
    16f4:	9c a9       	ldd	r25, Y+52	; 0x34
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	6d a9       	ldd	r22, Y+53	; 0x35
    1708:	7e a9       	ldd	r23, Y+54	; 0x36
    170a:	8f a9       	ldd	r24, Y+55	; 0x37
    170c:	98 ad       	ldd	r25, Y+56	; 0x38
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	98 ab       	std	Y+48, r25	; 0x30
    172c:	8f a7       	std	Y+47, r24	; 0x2f
    172e:	0f c0       	rjmp	.+30     	; 0x174e <LCD_displayCharacter+0xe4>
    1730:	89 e1       	ldi	r24, 0x19	; 25
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9e a7       	std	Y+46, r25	; 0x2e
    1736:	8d a7       	std	Y+45, r24	; 0x2d
    1738:	8d a5       	ldd	r24, Y+45	; 0x2d
    173a:	9e a5       	ldd	r25, Y+46	; 0x2e
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_displayCharacter+0xd2>
    1740:	9e a7       	std	Y+46, r25	; 0x2e
    1742:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8f a5       	ldd	r24, Y+47	; 0x2f
    1746:	98 a9       	ldd	r25, Y+48	; 0x30
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	98 ab       	std	Y+48, r25	; 0x30
    174c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1750:	98 a9       	ldd	r25, Y+48	; 0x30
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <LCD_displayCharacter+0xc6>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	69 a9       	ldd	r22, Y+49	; 0x31
    175a:	7a a9       	ldd	r23, Y+50	; 0x32
    175c:	8b a9       	ldd	r24, Y+51	; 0x33
    175e:	9c a9       	ldd	r25, Y+52	; 0x34
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
    176c:	8f a5       	ldd	r24, Y+47	; 0x2f
    176e:	98 a9       	ldd	r25, Y+48	; 0x30
    1770:	9c a7       	std	Y+44, r25	; 0x2c
    1772:	8b a7       	std	Y+43, r24	; 0x2b
    1774:	8b a5       	ldd	r24, Y+43	; 0x2b
    1776:	9c a5       	ldd	r25, Y+44	; 0x2c
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_displayCharacter+0x10e>
    177c:	9c a7       	std	Y+44, r25	; 0x2c
    177e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1780:	a2 e3       	ldi	r26, 0x32	; 50
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e2 e3       	ldi	r30, 0x32	; 50
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 64       	ori	r24, 0x40	; 64
    178c:	8c 93       	st	X, r24
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e8       	ldi	r26, 0x80	; 128
    1794:	bf e3       	ldi	r27, 0x3F	; 63
    1796:	8f a3       	std	Y+39, r24	; 0x27
    1798:	98 a7       	std	Y+40, r25	; 0x28
    179a:	a9 a7       	std	Y+41, r26	; 0x29
    179c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	6f a1       	ldd	r22, Y+39	; 0x27
    17a0:	78 a5       	ldd	r23, Y+40	; 0x28
    17a2:	89 a5       	ldd	r24, Y+41	; 0x29
    17a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a e7       	ldi	r20, 0x7A	; 122
    17ac:	53 e4       	ldi	r21, 0x43	; 67
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8b a3       	std	Y+35, r24	; 0x23
    17b8:	9c a3       	std	Y+36, r25	; 0x24
    17ba:	ad a3       	std	Y+37, r26	; 0x25
    17bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17be:	6b a1       	ldd	r22, Y+35	; 0x23
    17c0:	7c a1       	ldd	r23, Y+36	; 0x24
    17c2:	8d a1       	ldd	r24, Y+37	; 0x25
    17c4:	9e a1       	ldd	r25, Y+38	; 0x26
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <LCD_displayCharacter+0x176>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9a a3       	std	Y+34, r25	; 0x22
    17dc:	89 a3       	std	Y+33, r24	; 0x21
    17de:	3f c0       	rjmp	.+126    	; 0x185e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    17e0:	6b a1       	ldd	r22, Y+35	; 0x23
    17e2:	7c a1       	ldd	r23, Y+36	; 0x24
    17e4:	8d a1       	ldd	r24, Y+37	; 0x25
    17e6:	9e a1       	ldd	r25, Y+38	; 0x26
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	6f a1       	ldd	r22, Y+39	; 0x27
    17fa:	78 a5       	ldd	r23, Y+40	; 0x28
    17fc:	89 a5       	ldd	r24, Y+41	; 0x29
    17fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9a a3       	std	Y+34, r25	; 0x22
    181e:	89 a3       	std	Y+33, r24	; 0x21
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_displayCharacter+0x1d6>
    1822:	89 e1       	ldi	r24, 0x19	; 25
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	98 a3       	std	Y+32, r25	; 0x20
    1828:	8f 8f       	std	Y+31, r24	; 0x1f
    182a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182c:	98 a1       	ldd	r25, Y+32	; 0x20
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_displayCharacter+0x1c4>
    1832:	98 a3       	std	Y+32, r25	; 0x20
    1834:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	89 a1       	ldd	r24, Y+33	; 0x21
    1838:	9a a1       	ldd	r25, Y+34	; 0x22
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_displayCharacter+0x1b8>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9a a3       	std	Y+34, r25	; 0x22
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	9a a1       	ldd	r25, Y+34	; 0x22
    1862:	9e 8f       	std	Y+30, r25	; 0x1e
    1864:	8d 8f       	std	Y+29, r24	; 0x1d
    1866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1868:	9e 8d       	ldd	r25, Y+30	; 0x1e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_displayCharacter+0x200>
    186e:	9e 8f       	std	Y+30, r25	; 0x1e
    1870:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	89 ad       	ldd	r24, Y+57	; 0x39
    1878:	80 83       	st	Z, r24
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	bf e3       	ldi	r27, 0x3F	; 63
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	9a 8f       	std	Y+26, r25	; 0x1a
    1886:	ab 8f       	std	Y+27, r26	; 0x1b
    1888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <LCD_displayCharacter+0x262>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	69 8d       	ldd	r22, Y+25	; 0x19
    18e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	0f c0       	rjmp	.+30     	; 0x192c <LCD_displayCharacter+0x2c2>
    190e:	89 e1       	ldi	r24, 0x19	; 25
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <LCD_displayCharacter+0x2b0>
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <LCD_displayCharacter+0x2a4>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	98 89       	ldd	r25, Y+16	; 0x10
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_displayCharacter+0x2ec>
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    195e:	a2 e3       	ldi	r26, 0x32	; 50
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e2 e3       	ldi	r30, 0x32	; 50
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7b       	andi	r24, 0xBF	; 191
    196a:	8c 93       	st	X, r24
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e8       	ldi	r26, 0x80	; 128
    1972:	bf e3       	ldi	r27, 0x3F	; 63
    1974:	8b 87       	std	Y+11, r24	; 0x0b
    1976:	9c 87       	std	Y+12, r25	; 0x0c
    1978:	ad 87       	std	Y+13, r26	; 0x0d
    197a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a e7       	ldi	r20, 0x7A	; 122
    198a:	53 e4       	ldi	r21, 0x43	; 67
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8f 83       	std	Y+7, r24	; 0x07
    1996:	98 87       	std	Y+8, r25	; 0x08
    1998:	a9 87       	std	Y+9, r26	; 0x09
    199a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <LCD_displayCharacter+0x354>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
    19bc:	3f c0       	rjmp	.+126    	; 0x1a3c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    19be:	6f 81       	ldd	r22, Y+7	; 0x07
    19c0:	78 85       	ldd	r23, Y+8	; 0x08
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	4c f5       	brge	.+82     	; 0x1a28 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <LCD_displayCharacter+0x3b4>
    1a00:	89 e1       	ldi	r24, 0x19	; 25
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 83       	std	Y+4, r25	; 0x04
    1a06:	8b 83       	std	Y+3, r24	; 0x03
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_displayCharacter+0x3a2>
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <LCD_displayCharacter+0x396>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_displayCharacter+0x3de>
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a50:	e9 96       	adiw	r28, 0x39	; 57
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <LCD_displayString+0x6>
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	9b 83       	std	Y+3, r25	; 0x03
    1a70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a72:	19 82       	std	Y+1, r1	; 0x01
    1a74:	0e c0       	rjmp	.+28     	; 0x1a92 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	fc 01       	movw	r30, r24
    1a82:	e2 0f       	add	r30, r18
    1a84:	f3 1f       	adc	r31, r19
    1a86:	80 81       	ld	r24, Z
    1a88:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_displayCharacter>
		i++;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	8f 5f       	subi	r24, 0xFF	; 255
    1a90:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e2 0f       	add	r30, r18
    1aa0:	f3 1f       	adc	r31, r19
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 23       	and	r24, r24
    1aa6:	39 f7       	brne	.-50     	; 0x1a76 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <LCD_goToRowColumn+0x6>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <LCD_goToRowColumn+0x8>
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
    1ac4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	3d 83       	std	Y+5, r19	; 0x05
    1ace:	2c 83       	std	Y+4, r18	; 0x04
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	c1 f0       	breq	.+48     	; 0x1b0a <LCD_goToRowColumn+0x56>
    1ada:	2c 81       	ldd	r18, Y+4	; 0x04
    1adc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <LCD_goToRowColumn+0x3a>
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <LCD_goToRowColumn+0x50>
    1aec:	19 c0       	rjmp	.+50     	; 0x1b20 <LCD_goToRowColumn+0x6c>
    1aee:	2c 81       	ldd	r18, Y+4	; 0x04
    1af0:	3d 81       	ldd	r19, Y+5	; 0x05
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	69 f0       	breq	.+26     	; 0x1b12 <LCD_goToRowColumn+0x5e>
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <LCD_goToRowColumn+0x66>
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	0b c0       	rjmp	.+22     	; 0x1b20 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	80 5c       	subi	r24, 0xC0	; 192
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	07 c0       	rjmp	.+14     	; 0x1b20 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	80 5f       	subi	r24, 0xF0	; 240
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	80 5b       	subi	r24, 0xB0	; 176
    1b1e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
}
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <LCD_displayStringRowColumn+0x6>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <LCD_displayStringRowColumn+0x8>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	6a 83       	std	Y+2, r22	; 0x02
    1b48:	5c 83       	std	Y+4, r21	; 0x04
    1b4a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b50:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	62 97       	sbiw	r28, 0x12	; 18
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	9a 8b       	std	Y+18, r25	; 0x12
    1b80:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1b82:	89 89       	ldd	r24, Y+17	; 0x11
    1b84:	9a 89       	ldd	r25, Y+18	; 0x12
    1b86:	9e 01       	movw	r18, r28
    1b88:	2f 5f       	subi	r18, 0xFF	; 255
    1b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	4a e0       	ldi	r20, 0x0A	; 10
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <itoa>
   LCD_displayString(buff);
    1b96:	ce 01       	movw	r24, r28
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayString>
}
    1b9e:	62 96       	adiw	r28, 0x12	; 18
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_sendCommand>
}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <PWM_init>:
uint8 g_OCR0;
uint8 g_OCR1;
uint8 g_OCR2;

void PWM_init(const PWM_configType * config_Ptr)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <PWM_init+0x6>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	if((config_Ptr->whichTimer) == TIMER_0)
    1bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 23       	and	r24, r24
    1bda:	09 f0       	breq	.+2      	; 0x1bde <PWM_init+0x1a>
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <PWM_init+0x9a>
	{
		SET_BIT(DDRB,PB3);
    1bde:	a7 e3       	ldi	r26, 0x37	; 55
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e7 e3       	ldi	r30, 0x37	; 55
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	88 60       	ori	r24, 0x08	; 8
    1bea:	8c 93       	st	X, r24
		TCNT0 = g_initialCount_T0;
    1bec:	e2 e5       	ldi	r30, 0x52	; 82
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 91 8b 00 	lds	r24, 0x008B
    1bf4:	80 83       	st	Z, r24
		OCR0  = g_OCR0;
    1bf6:	ec e5       	ldi	r30, 0x5C	; 92
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 91 90 00 	lds	r24, 0x0090
    1bfe:	80 83       	st	Z, r24
		SET_BIT(TCCR0,WGM01);
    1c00:	a3 e5       	ldi	r26, 0x53	; 83
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e3 e5       	ldi	r30, 0x53	; 83
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 60       	ori	r24, 0x08	; 8
    1c0c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
    1c0e:	a3 e5       	ldi	r26, 0x53	; 83
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e3 e5       	ldi	r30, 0x53	; 83
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 64       	ori	r24, 0x40	; 64
    1c1a:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xCF) | ((config_Ptr->mode)<<4);
    1c1c:	a3 e5       	ldi	r26, 0x53	; 83
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e3 e5       	ldi	r30, 0x53	; 83
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	28 2f       	mov	r18, r24
    1c28:	2f 7c       	andi	r18, 0xCF	; 207
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	81 81       	ldd	r24, Z+1	; 0x01
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	82 95       	swap	r24
    1c36:	92 95       	swap	r25
    1c38:	90 7f       	andi	r25, 0xF0	; 240
    1c3a:	98 27       	eor	r25, r24
    1c3c:	80 7f       	andi	r24, 0xF0	; 240
    1c3e:	98 27       	eor	r25, r24
    1c40:	82 2b       	or	r24, r18
    1c42:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (config_Ptr->clock);
    1c44:	a3 e5       	ldi	r26, 0x53	; 83
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e3 e5       	ldi	r30, 0x53	; 83
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	98 2f       	mov	r25, r24
    1c50:	98 7f       	andi	r25, 0xF8	; 248
    1c52:	e9 81       	ldd	r30, Y+1	; 0x01
    1c54:	fa 81       	ldd	r31, Y+2	; 0x02
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	89 2b       	or	r24, r25
    1c5a:	8c 93       	st	X, r24
    1c5c:	4b c0       	rjmp	.+150    	; 0x1cf4 <PWM_init+0x130>
	}
	else if((config_Ptr->whichTimer) == TIMER_1)
    1c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c60:	fa 81       	ldd	r31, Y+2	; 0x02
    1c62:	80 81       	ld	r24, Z
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <PWM_init+0xa6>
    1c68:	45 c0       	rjmp	.+138    	; 0x1cf4 <PWM_init+0x130>
	{

	}
	else if((config_Ptr->whichTimer) == TIMER_2)
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	80 81       	ld	r24, Z
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <PWM_init+0xb2>
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <PWM_init+0x130>
	{
		SET_BIT(DDRD,PB7);
    1c76:	a1 e3       	ldi	r26, 0x31	; 49
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e1 e3       	ldi	r30, 0x31	; 49
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	80 68       	ori	r24, 0x80	; 128
    1c82:	8c 93       	st	X, r24
		TCNT2 = g_initialCount_T2;
    1c84:	e4 e4       	ldi	r30, 0x44	; 68
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 91 8e 00 	lds	r24, 0x008E
    1c8c:	80 83       	st	Z, r24
		OCR2  = g_OCR2;
    1c8e:	e3 e4       	ldi	r30, 0x43	; 67
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 91 8f 00 	lds	r24, 0x008F
    1c96:	80 83       	st	Z, r24
		SET_BIT(TCCR2,WGM21);
    1c98:	a5 e4       	ldi	r26, 0x45	; 69
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e4       	ldi	r30, 0x45	; 69
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 60       	ori	r24, 0x08	; 8
    1ca4:	8c 93       	st	X, r24
		SET_BIT(TCCR2,WGM20);
    1ca6:	a5 e4       	ldi	r26, 0x45	; 69
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e4       	ldi	r30, 0x45	; 69
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 64       	ori	r24, 0x40	; 64
    1cb2:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xCF) | ((config_Ptr->mode)<<4);
    1cb4:	a5 e4       	ldi	r26, 0x45	; 69
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e5 e4       	ldi	r30, 0x45	; 69
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	2f 7c       	andi	r18, 0xCF	; 207
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	82 95       	swap	r24
    1cce:	92 95       	swap	r25
    1cd0:	90 7f       	andi	r25, 0xF0	; 240
    1cd2:	98 27       	eor	r25, r24
    1cd4:	80 7f       	andi	r24, 0xF0	; 240
    1cd6:	98 27       	eor	r25, r24
    1cd8:	82 2b       	or	r24, r18
    1cda:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | (config_Ptr->clock);
    1cdc:	a5 e4       	ldi	r26, 0x45	; 69
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e5 e4       	ldi	r30, 0x45	; 69
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	98 7f       	andi	r25, 0xF8	; 248
    1cea:	e9 81       	ldd	r30, Y+1	; 0x01
    1cec:	fa 81       	ldd	r31, Y+2	; 0x02
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	89 2b       	or	r24, r25
    1cf2:	8c 93       	st	X, r24
	}
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <PWM_changeDuty>:

void PWM_changeDuty(const PWM_configType * config_Ptr,uint8 a_duty)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <PWM_changeDuty+0x6>
    1d04:	0f 92       	push	r0
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
	if((config_Ptr->whichTimer) ==TIMER_0)
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	80 81       	ld	r24, Z
    1d16:	88 23       	and	r24, r24
    1d18:	29 f4       	brne	.+10     	; 0x1d24 <PWM_changeDuty+0x26>
	{
		OCR0 = a_duty;
    1d1a:	ec e5       	ldi	r30, 0x5C	; 92
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	80 83       	st	Z, r24
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <PWM_changeDuty+0x42>
	}
	else if((config_Ptr->whichTimer) ==TIMER_1)
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	80 81       	ld	r24, Z
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	49 f0       	breq	.+18     	; 0x1d40 <PWM_changeDuty+0x42>
	{

	}
	else if((config_Ptr->whichTimer) ==TIMER_2)
    1d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d30:	fa 81       	ldd	r31, Y+2	; 0x02
    1d32:	80 81       	ld	r24, Z
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <PWM_changeDuty+0x42>
	{
		OCR2 = a_duty;
    1d38:	e3 e4       	ldi	r30, 0x43	; 67
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	80 83       	st	Z, r24
	}
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <__prologue_saves__>:
    1d4c:	2f 92       	push	r2
    1d4e:	3f 92       	push	r3
    1d50:	4f 92       	push	r4
    1d52:	5f 92       	push	r5
    1d54:	6f 92       	push	r6
    1d56:	7f 92       	push	r7
    1d58:	8f 92       	push	r8
    1d5a:	9f 92       	push	r9
    1d5c:	af 92       	push	r10
    1d5e:	bf 92       	push	r11
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	ca 1b       	sub	r28, r26
    1d76:	db 0b       	sbc	r29, r27
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	09 94       	ijmp

00001d84 <__epilogue_restores__>:
    1d84:	2a 88       	ldd	r2, Y+18	; 0x12
    1d86:	39 88       	ldd	r3, Y+17	; 0x11
    1d88:	48 88       	ldd	r4, Y+16	; 0x10
    1d8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d90:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d92:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d94:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d96:	b9 84       	ldd	r11, Y+9	; 0x09
    1d98:	c8 84       	ldd	r12, Y+8	; 0x08
    1d9a:	df 80       	ldd	r13, Y+7	; 0x07
    1d9c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d9e:	fd 80       	ldd	r15, Y+5	; 0x05
    1da0:	0c 81       	ldd	r16, Y+4	; 0x04
    1da2:	1b 81       	ldd	r17, Y+3	; 0x03
    1da4:	aa 81       	ldd	r26, Y+2	; 0x02
    1da6:	b9 81       	ldd	r27, Y+1	; 0x01
    1da8:	ce 0f       	add	r28, r30
    1daa:	d1 1d       	adc	r29, r1
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	ed 01       	movw	r28, r26
    1db8:	08 95       	ret

00001dba <itoa>:
    1dba:	fb 01       	movw	r30, r22
    1dbc:	9f 01       	movw	r18, r30
    1dbe:	e8 94       	clt
    1dc0:	42 30       	cpi	r20, 0x02	; 2
    1dc2:	c4 f0       	brlt	.+48     	; 0x1df4 <itoa+0x3a>
    1dc4:	45 32       	cpi	r20, 0x25	; 37
    1dc6:	b4 f4       	brge	.+44     	; 0x1df4 <itoa+0x3a>
    1dc8:	4a 30       	cpi	r20, 0x0A	; 10
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <itoa+0x1c>
    1dcc:	97 fb       	bst	r25, 7
    1dce:	1e f4       	brtc	.+6      	; 0x1dd6 <itoa+0x1c>
    1dd0:	90 95       	com	r25
    1dd2:	81 95       	neg	r24
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	64 2f       	mov	r22, r20
    1dd8:	77 27       	eor	r23, r23
    1dda:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__udivmodhi4>
    1dde:	80 5d       	subi	r24, 0xD0	; 208
    1de0:	8a 33       	cpi	r24, 0x3A	; 58
    1de2:	0c f0       	brlt	.+2      	; 0x1de6 <itoa+0x2c>
    1de4:	89 5d       	subi	r24, 0xD9	; 217
    1de6:	81 93       	st	Z+, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	a1 f7       	brne	.-24     	; 0x1dd6 <itoa+0x1c>
    1dee:	16 f4       	brtc	.+4      	; 0x1df4 <itoa+0x3a>
    1df0:	5d e2       	ldi	r21, 0x2D	; 45
    1df2:	51 93       	st	Z+, r21
    1df4:	10 82       	st	Z, r1
    1df6:	c9 01       	movw	r24, r18
    1df8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <strrev>

00001dfc <strrev>:
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	fc 01       	movw	r30, r24
    1e00:	67 2f       	mov	r22, r23
    1e02:	71 91       	ld	r23, Z+
    1e04:	77 23       	and	r23, r23
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <strrev+0x4>
    1e08:	32 97       	sbiw	r30, 0x02	; 2
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <strrev+0x18>
    1e0c:	7c 91       	ld	r23, X
    1e0e:	6d 93       	st	X+, r22
    1e10:	70 83       	st	Z, r23
    1e12:	62 91       	ld	r22, -Z
    1e14:	ae 17       	cp	r26, r30
    1e16:	bf 07       	cpc	r27, r31
    1e18:	c8 f3       	brcs	.-14     	; 0x1e0c <strrev+0x10>
    1e1a:	08 95       	ret

00001e1c <__udivmodhi4>:
    1e1c:	aa 1b       	sub	r26, r26
    1e1e:	bb 1b       	sub	r27, r27
    1e20:	51 e1       	ldi	r21, 0x11	; 17
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <__udivmodhi4_ep>

00001e24 <__udivmodhi4_loop>:
    1e24:	aa 1f       	adc	r26, r26
    1e26:	bb 1f       	adc	r27, r27
    1e28:	a6 17       	cp	r26, r22
    1e2a:	b7 07       	cpc	r27, r23
    1e2c:	10 f0       	brcs	.+4      	; 0x1e32 <__udivmodhi4_ep>
    1e2e:	a6 1b       	sub	r26, r22
    1e30:	b7 0b       	sbc	r27, r23

00001e32 <__udivmodhi4_ep>:
    1e32:	88 1f       	adc	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	5a 95       	dec	r21
    1e38:	a9 f7       	brne	.-22     	; 0x1e24 <__udivmodhi4_loop>
    1e3a:	80 95       	com	r24
    1e3c:	90 95       	com	r25
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	08 95       	ret

00001e44 <_exit>:
    1e44:	f8 94       	cli

00001e46 <__stop_program>:
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <__stop_program>
